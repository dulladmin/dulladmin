<!-- Code generated by DullAdmin; DO NOT EDIT. -->

<template>
  <div>
    <a-card :title="$t('{{block.title.i18nKey}}')">
      <a-spin style="display: block" :loading="loading">
        <a-form
          :model="store"
          :auto-label-width="true"
        >
        {{#each model.attributes}}
          <DullFormItem
            v-model="store.{{name}}"
            :meta="modelMetadata.{{name}}"
          />
        {{/each}}
          <a-form-item>
            <a-space>
              <a-button type="primary" @click="onFormSave" :loading="saving">
                <template #icon>
                  <icon-save />
                </template>
                \{{ $t('form.actions.save') }}
              </a-button>
            </a-space>
          </a-form-item>
        </a-form>
      </a-spin>
    </a-card>
  </div>
</template>

<script lang="ts" setup>
  import { computed, reactive, ref } from 'vue';
  import { useRoute } from 'vue-router';
  import { useI18n } from 'vue-i18n';
  import { omitBy } from 'lodash';
  import { Model, UpdateRequest, get, update } from '{{ block.apiImportPath }}';
  import { useLoading } from '@/hooks';

  // i18n
  const { t } = useI18n();

  // route
  const route = useRoute();
  const id = (route.params.id as string) ?? '';

  // model
  const modelMetadata: { [key: string]: any } = {
  {{#each model.attributes}}
    {{#if object.attributes}}
    {{name}}: {
      {{#each object.attributes}}
      {{name}}: {
        type: '{{type}}',
        i18nKey: '{{i18nKey}}',
      },
      {{/each}}
    },
    {{else}}
    {{name}}: {
      type: '{{type}}',
      i18nKey: '{{i18nKey}}',
      {{#if optionals}}
      optionals: {
        {{#each optionals}}
        {{name}}: {
          i18nKey: '{{i18nKey}}',
        },
        {{/each}}
      },
      {{/if}}
    },
    {{/if}}
  {{/each}}
  };

  // form - store
  const { loading, setLoading } = useLoading(true);
  const store = ref<Model>({
  {{#each model.attributes}}
    {{#if collection}}
    {{name}}: [],
    {{else}}
    {{name}}: undefined,
    {{/if}}
  {{/each}}
  });
  const fetchStore = async () => {
    setLoading(true);
    try {
      const { data } = await get(id);
      const { model } = data;

      if (model) {
        store.value = model;
      }
    } finally {
      setLoading(false);
    }
  };

  // form - save
  const { loading: saving, setLoading: setSaving } = useLoading(false);
  const onFormSave = async () => {
    setSaving(true);
    try {
      const req = {
        model: omitBy(store.value, (v) => {
          return v == null
        }),
      } as UpdateRequest;
      const { data } = await update(id, req);
      const { model } = data;
      store.value = model;
    } finally {
      setSaving(false);
    }
  };

  // form - init
  fetchStore();
</script>

<style lang="less" scoped></style>
